#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Data Manager for NEXARIS Cognitive Load Estimator

This module handles data storage, retrieval, and management for the application.
It provides interfaces for storing user session data, behavioral metrics,
and cognitive load scores.
"""

import os
import json
import time
import uuid
import logging
import threading
import pandas as pd
import numpy as np
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional, Union, Tuple

# Import utilities
from ..utils.logging_utils import get_logger


class DataManager:
    """
    Manages data storage and retrieval for the NCLE application
    """
    
    def __init__(self, config: Dict[str, Any]):
        """
        Initialize the data manager
        
        Args:
            config: Application configuration dictionary
        """
        self.config = config
        self.logger = get_logger(__name__)
        
        # Set up data storage paths
        self.data_dir = Path(config['data']['storage_path'])
        self.sessions_dir = self.data_dir / 'sessions'
        self.models_dir = self.data_dir / 'models'
        self.exports_dir = self.data_dir / 'exports'
        
        # Create directories if they don't exist
        for directory in [self.data_dir, self.sessions_dir, self.models_dir, self.exports_dir]:
            directory.mkdir(parents=True, exist_ok=True)
        
        # Initialize session data
        self.current_session_id = None
        self.current_session_data = {}
        self.current_task_id = None
        
        # Set up backup timer
        self.backup_interval = config['data']['backup_interval']
        self.backup_timer = None
        if self.backup_interval > 0:
            self._start_backup_timer()
        
        self.logger.info("Data Manager initialized")
    
    def _start_backup_timer(self) -> None:
        """
        Start the automatic backup timer
        """
        def backup_task():
            self.backup_current_session()
            # Schedule next backup
            self.backup_timer = threading.Timer(self.backup_interval, backup_task)
            self.backup_timer.daemon = True
            self.backup_timer.start()
        
        # Start initial timer
        self.backup_timer = threading.Timer(self.backup_interval, backup_task)
        self.backup_timer.daemon = True
        self.backup_timer.start()
        self.logger.debug(f"Backup timer started with interval {self.backup_interval} seconds")
    
    def start_new_session(self, user_id: Optional[str] = None) -> str:
        """
        Start a new data collection session
        
        Args:
            user_id: Optional user identifier
            
        Returns:
            Session ID for the new session
        """
        # Save current session if exists
        if self.current_session_id is not None:
            self.save_session(self.current_session_id)
        
        # Generate new session ID
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        if user_id:
            session_id = f"{user_id}_{timestamp}"
        else:
            # Generate a short UUID
            short_uuid = str(uuid.uuid4())[:8]
            session_id = f"session_{timestamp}_{short_uuid}"
        
        # Initialize new session data
        self.current_session_id = session_id
        self.current_session_data = {
            'id': session_id,
            'start_time': datetime.now().isoformat(),
            'end_time': None,
            'user_id': user_id,
            'tasks': [],
            'metrics': {},
            'notes': []
        }
        
        # Save initial session data
        self.save_session(session_id)
        
        self.logger.info(f"New session started: {session_id}")
        
        return session_id
    
    def end_current_session(self) -> Optional[str]:
        """
        End the current data collection session
        
        Returns:
            Session ID of the ended session, or None if no session was active
        """
        if not self.current_session_id:
            return None
        
        # Update end time
        self.current_session_data['end_time'] = datetime.now().isoformat()
        
        # Save session data
        session_id = self.current_session_id
        self.save_session(session_id)
        
        # Reset current session
        self.current_session_id = None
        self.current_session_data = {}
        self.current_task_id = None
        
        self.logger.info(f"Session ended: {session_id}")
        
        return session_id
    
    def is_session_active(self) -> bool:
        """
        Check if there is an active session
        
        Returns:
            True if a session is active, False otherwise
        """
        return self.current_session_id is not None
    
    def get_current_session_id(self) -> Optional[str]:
        """
        Get the current session ID
        
        Returns:
            Current session ID or None if no session is active
        """
        return self.current_session_id